(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{480:function(e,t,a){"use strict";a.r(t);var s=a(2),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"day-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#day-1"}},[e._v("#")]),e._v(" Day 1")]),e._v(" "),a("p",[a("strong",[e._v("12/07/2020")])]),e._v(" "),a("h2",{attrs:{id:"what-is-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-scope"}},[e._v("#")]),e._v(" What is Scope?")]),e._v(" "),a("p",[e._v("The scope is the part of a computer program where an item that has an identifier name is recognized. Items with an identifier inclue variable, constants and functions.")]),e._v(" "),a("h2",{attrs:{id:"what-is-hoistig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-hoistig"}},[e._v("#")]),e._v(" What is Hoistig?")]),e._v(" "),a("p",[e._v("Hoisting is a mechanism in Javascript where variables and function declarations get moved the top of their scope before the code gets executed.\nThis ensures that no matter where a function or variable gets declared, it gets moved to the top of its scope whether that scope is\nglobal or local.")]),e._v(" "),a("h2",{attrs:{id:"in-what-cases-might-you-use-let-cs-const-vs-var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-what-cases-might-you-use-let-cs-const-vs-var"}},[e._v("#")]),e._v(" In what cases might you use let cs const vs var?")]),e._v(" "),a("p",[e._v("The var variable can be updated and redeclared within its scope. I would use var for a variable that gets used often and undergoes complete, radical changes. Let variables can be updated but not redeclared. I would use let for a variable that changes, but doesn't need to be re-declared. Const variables cannot be updated or redeclared. I would use const for a variable that I don't want to change at any time.")])])}),[],!1,null,null,null);t.default=r.exports}}]);